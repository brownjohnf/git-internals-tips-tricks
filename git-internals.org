#+title: Git Internals, Tips and Tricks

* ~git~
~git~, at its heart, is a content-addressable storage system.

#+begin_quote
Content-addressable storage [...] is a way to store information so it can be
retrieved based on
its content, not its location. -- Wikipedia[fn:1:https://en.wikipedia.org/wiki/Content-addressable_storage]
#+end_quote

This means that you give it some
bytes, and it will store them indexed by the checksum of the bytes.

Almost everything in ~git~ is represented on disk by blobs stored in files named
according to their content hash; this is why you can step back through history
(among other features). Let's start with an empty directory, and start
constructing a valid ~.git~ directory from scratch.

* ~.git~ directory
Before we start building our own directory, let's take a look at the contents of
the ~.git~ directory in repo containing this document. The files in the ~.git~
directory contain all of the contents of the repo.

#+BEGIN_SRC sh :results output :exports both
ls -lah .git
#+END_SRC

#+RESULTS:
#+begin_example
total 11K
drwxr-xr-x 8 jackb jackb  13 Nov 29 08:01 .
drwxr-xr-x 3 jackb jackb  10 Nov 29 08:22 ..
drwxr-xr-x 2 jackb jackb   2 Nov 28 22:28 branches
-rw-r--r-- 1 jackb jackb 280 Nov 28 22:28 config
-rw-r--r-- 1 jackb jackb  73 Nov 28 22:28 description
-rw-r--r-- 1 jackb jackb  23 Nov 28 22:28 HEAD
drwxr-xr-x 2 jackb jackb  14 Nov 28 22:28 hooks
-rw-r--r-- 1 jackb jackb 385 Nov 28 22:28 index
drwxr-xr-x 2 jackb jackb   3 Nov 28 22:28 info
drwxr-xr-x 3 jackb jackb   4 Nov 28 22:28 logs
drwxr-xr-x 4 jackb jackb   4 Nov 28 22:28 objects
-rw-r--r-- 1 jackb jackb 114 Nov 28 22:28 packed-refs
drwxr-xr-x 5 jackb jackb   5 Nov 28 22:28 refs
#+end_example

** ~.git/objects~
Every time you commit, files get stored in ~.git/objects~ based on their SHA-1.
We can get the hash that ~git~ will use when storing a file

#+begin_src sh :var FILE="git-internals.org" :results output :exports both
git hash-object $FILE
#+end_src

#+RESULTS:
: 4c1ffac1de049f3ca9081506961a103dd584b282

~git~ stores hashed objects in the ~.git/objects~ directory, in directories using
the first 2 characters of the hash. This prevents directories from getting
excessively large when you have a lot of objects in your repo.

#+begin_src shell :results output :exports both
ls -lah .git/objects
#+end_src

#+RESULTS:
: total 15K
: drwxr-xr-x 7 jackb jackb  7 Nov 29 08:45 .
: drwxr-xr-x 8 jackb jackb 14 Nov 29 08:46 ..
: drwxr-xr-x 2 jackb jackb  3 Nov 29 08:40 17
: drwxr-xr-x 2 jackb jackb  3 Nov 29 08:45 1a
: drwxr-xr-x 2 jackb jackb  3 Nov 29 08:45 ce
: drwxr-xr-x 2 jackb jackb  2 Nov 28 22:28 info
: drwxr-xr-x 2 jackb jackb  4 Nov 28 22:28 pack

We can use the first 2 characters from the hash of this file that we just found
to find the actual object.

#+begin_src shell :results output :exports both
ls -lah .git/objects/17
#+end_src

#+RESULTS:
: total 3.0K
: drwxr-xr-x 2 jackb jackb    3 Nov 29 08:40 .
: drwxr-xr-x 7 jackb jackb    7 Nov 29 08:45 ..
: -r--r--r-- 1 jackb jackb 1.4K Nov 29 08:40 683bf9637738d3e12f6babfd2a2be530645da4

* Reading Objects
~git~ uses a SHA-1 hashing algorithm, but only after prepending some header metadata.

#+begin_src shell :results output :exports both
shasum -a 1 example.txt
#+end_src

#+RESULTS:
: 9b1de7c6ea7e1b81fb12038b7e52ae742cef2e96  example.txt

Use plumbing commands to get the contents of the file back out.

#+begin_src shell :results output :exports both
xxd .git/objects/17/683bf9637738d3e12f6babfd2a2be530645da4
#+end_src

#+RESULTS:
#+begin_example
00000000: 7801 ad56 db6e db46 10ed f37e c520 35e0  x..V.n.F...~. 5.
00000010: c435 2991 b264 4905 8adc 8ca4 48e0 0276  .5)..dI.....H..v
00000020: 823c a441 b224 9722 6392 cb2e 9796 8434  .<.A.$."c......4
00000030: ffde 33bc 2812 5bbb 2950 4096 b5e4 ccec  ..3.(.[.)P@.....
00000040: ccd9 3367 36c8 7440 136f 72f6 c309 c575  ..3g6.t@.or....u
00000050: 11da 5417 9510 fd4f ca32 f9f0 117d 1144  ..T....O.2...}.D
00000060: 2a4c 341d 7ffa f4e9 b85f 3cf8 fd88 b28a  *L4......_<.....
00000070: 8e1e 3fc0 13fc 7032 9960 457f 925c dfd0  ..?...p2.`E..\..
00000080: f197 34a6 8797 57bf 788f a834 6961 e9c8  ..4...W.x..4ia..
00000090: 3ba5 a329 fe16 5f77 31f6 038a af7b 1b9b  ;..).._w1....{..
000000a0: bab8 7be3 a36e d3a3 c77d 2ec3 3827 b44a  ..{..n...}..8'.J
000000b0: ad78 91da 5392 9652 5b51 a2a4 c12a ad48  .x..S..R[Q...*.H
000000c0: 52a8 0bab 0aeb c828 32aa aa64 9029 aaac  R......(2..d.)..
000000d0: 3672 85ff dbca aadc 15e2 c79f 02b5 4a8b  6r............J.
000000e0: 8f7f d4da 2af1 ec1e 97f7 aeeb 7e68 23af  ....*.......~h#.
000000f0: e596 ac6e 8229 4a8b 589b 5c32 a654 6964  ...n.)J.X.\2.Tid
00000100: 41a1 2c28 50c2 286b 5275 ab22 0a64 856f  A.,(P.(kRu.".d.o
00000110: 5d08 4eb1 4beb 940a dde6 9ce9 b0f1 76c9  ].N.K.........v.
00000120: 71e8 5d7a 9396 2a4a e5fb b858 7acb c4da  q.]z..*J...Xz...
00000130: b25a 8e46 aa70 d7fd 1b57 9bd5 8857 a37f  .Z.F.p...W...W..
00000140: 48f7 6357 e107 54a6 8aa8 ab4b bc49 0049  H.cW..T....K.I.I
00000150: ae64 5191 4d80 d556 d7c0 ee16 d95b 249d  .dQ.M..V.....[$.
00000160: 2b11 6cad aa00 6311 f1a3 759a 655d 7936  +.l...c...u.e]y6
00000170: 5139 6a8c d486 0b41 dd89 a230 51e1 4d55  Q9j....A...0Q.MU
00000180: e7a4 e366 dd38 03cc 2759 ae2b 4ba8 d96c  ...f.8..'Y.+K..l
00000190: 6d92 162b 38f2 1131 6a46 9538 059c 4783  m..+8..1jF.8..G.
000001a0: 0445 6975 c3e1 0250 b36a b7c2 ce05 c569  .Eiu...P.j.....i
000001b0: a62a 2a64 ae22 21c3 509b 88c3 006c ec9b  .**d."!.P....l..
000001c0: 9a1e 3c4a 6495 fc8c 6708 8ccf 3ad9 3615  ..<Jd...g...:.6.
000001d0: 31f0 38d7 1280 8737 786b 74bd 4a08 4638  1.8....7xkt.J.F8
000001e0: f5ad 7828 738d 581a 910c c54a da1a 093d  ..x(s.X....J...=
000001f0: 72e9 b5b2 c79c 0298 83c2 6d02 1048 e5a5  r.........m..H..
00000200: dd22 49a3 42f6 6d81 694c 04ce afb2 a646  ."I.B.m.iL.....F
00000210: 1321 98a4 5b99 a511 b95c e5ce 9c62 a373  .!..[....\...b.s
00000220: aa42 236d 9800 9793 c17b f154 8133 8ad6  .B#m.....{.T.3..
00000230: 4c48 de36 a8d3 ac29 54d7 86f4 baf8 16ea  LH.6...)T.......
00000240: 94b2 263d 2b6f 1476 cbb4 be61 ae37 a7d0  ..&=+o.v...a.7..
00000250: 92b5 c229 085e 0f72 0098 c05c 3790 c9b4  ...).^.r...\7...
00000260: 6860 64bc 221d d639 cec1 a537 706a f186  h`d."..9...7pj..
00000270: 6d1f 417c ab82 990a 4f92 2043 77d2 1d79  m.A|....O. Cw..y
00000280: 79cf c683 7768 bae8 e9c5 8b5f 2f3f 5e5f  y...wh....._/?^_
00000290: 3da3 2aa1 2580 ad33 705d d7b6 ac2d 2dd5  =.*.%..3p]...--.
000002a0: a6d4 06eb 00e0 8b5e 4438 5fb0 f4e2 f239  .......^D8_....9
000002b0: fb71 2b5e 5d5c bf7d fde6 7ab9 eb4a b591  .q+^]\.}..z..J..
000002c0: 7999 2961 b595 1979 de2b 1199 f5c6 38fc  y.)a...y.+....8.
000002d0: a139 7dc6 3107 dd37 7913 bad4 b7e4 2f68  .9}.1..7y...../h
000002e0: 3c5f 8e3d 72f7 6d27 03db f19e adef 937b  <_.=r.m'.......{
000002f0: 60ec 1f1a 93df 1acf c9f7 97fe 9c02 230b  `.............#.
00000300: 7440 251c b376 8cc3 1ff2 0e5c fc79 17bf  t@%..v.....\.y..
00000310: 7701 6c71 baba db81 cebb e47b 8748 813d  w.lq.......{.H.=
00000320: 69c9 a272 8f97 3ff0 7a79 f1e4 f97e d583  i..r..?.zy...~..
00000330: 42bc b3c3 4212 90e9 9e2a 26f3 e9a1 7da3  B...B....*&...}.
00000340: 02f7 c4a7 413a ac8c fbe6 8343 a041 3a99  ....A:.....C.A:.
00000350: 5e55 fbe6 6707 98d2 d05c 079f d19c f7e4  ^U..g....\......
00000360: ef0d eb2d 4117 1539 46c5 07fb 4c07 fb0c  ...-A..9F...L...
00000370: aa6e cc5b 31ed e928 4eda 8e1e f539 5cb0  .n.[1..(N....9\.
00000380: e291 4d73 d5ea 90ce 731e 4a6d 73ad 1434  ..Ms....s.Jms..4
00000390: 162a 02e1 4333 31eb 7bbf dd60 e05e 82ba  .*..C31.{..`.^..
000003a0: 5dbf 7ce2 4f67 ae78 0789 8508 b123 b725  ].|.Og.x.....#.%
000003b0: 8b1d 7ea0 ed59 651a 6dae 2ba8 47a2 58ee  ..~..Ye.m.+.G.X.
000003c0: 34c6 2e0b 116f f66d 9e55 26fc f74e e470  4....o.m.U&..N.p
000003d0: 1cdc 69eb a0ae 3ed7 6eb8 3179 7c20 cc41  ..i...>.n.1y| .A
000003e0: 632e 691e 8ccf 223f 9ecd 1667 e368 361f  c.i..."?...g.h6.
000003f0: 478b d89f 7bfe 641a 8dfd 5914 8441 74ae  G...{.d...Y..At.
00000400: a220 9e0b c1b3 04e9 2347 d5cc 993d 91d9  . ......#G...=..
00000410: 01b0 139b 61e6 0a9a f3fd 32d2 c7bb 33eb  ....a.....2...3.
00000420: 4e40 26af c492 f624 6440 b101 21dd 43e3  N@&....$d@..!.C.
00000430: 43bd f99b dc0c ac07 bd37 d090 a635 0e52  C........7...5.R
00000440: 19d8 0f52 61ea fe3f 108d e6c1 1d28 614c  ...Ra..?.....(aL
00000450: 5d29 d98c a1df bade 6282 806a 7c9b 0237  ])......b..j|..7
00000460: 1daf 614b 43b7 6c05 ded9 243f c5ec b2b8  ..aKC.l...$?....
00000470: da64 5b92 b1c5 60c5 942f c11c 36e2 8b05  .d[...`../..6...
00000480: dfc8 223c ce95 9591 b412 c302 973e 5053  .."<.........>PS
00000490: f2fd c191 50ce 7dd6 89b7 2076 99d5 79c0  ....P.}... v..y.
000004a0: 0142 f411 5884 3b8b de35 c370 0231 eddb  .B..X.;..5.p.1..
000004b0: 798f 61d3 45df 6cda 89dc d302 358f be93  y.a.E.l.....5...
000004c0: b59c 1c57 8d2b 99d3 8476 caff 40f9 137a  ...W.+...v..@..z
000004d0: d6b4 7e85 9b24 4b00 80c3 9897 19ee 859d  ..~..$K.........
000004e0: 0248 0cc5 165c 1683 e602 c357 a0e6 352e  .H...\.....W..5.
000004f0: a65d 019c 81e3 14da 29f1 cc60 eaaf c829  .]......)..`...)
00000500: 0055 1c2e c278 a1ce c68b 30f0 bcd9 1c4d  .U...x....0....M
00000510: 2717 e3e0 5c9d cfa7 f369 28cf 67e7 fe24  '...\....i(.g..$
00000520: f0fc 0663 6bd0 77fb 7233 8ac3 e6c5 b0be  ...ck.w.r3......
00000530: ef8e fa17 5318 f361                      ....S..a
#+end_example

#+begin_src shell :results output :exports both
git cat-file -p 17683bf9637738d3e12f6babfd2a2be530645da4
#+end_src

#+RESULTS:
#+begin_example
,* functions

function lla() {
  echo '```'
  echo "\$ ls $@"
  ls -lah $@ | awk '{if (NR>1) print $1, $5, $9}'
  echo '```'
  echo
}

function run() {
  echo '```'
  echo "$ $@"
  $@
  echo '```'
  echo
}

,* git
Git, at its heart, is a content-addressable storage system.

,#+begin_quote
Content-addressable storage [...] is a way to store information so it can be
retrieved based on
its content, not its location. -- Wikipedia[fn:1:https://en.wikipedia.org/wiki/Content-addressable_storage]
,#+end_quote

This means that you give it some
bytes, and it will store them indexed by the checksum of the bytes.

Almost everything in git is represented on disk by blobs stored in files named
according to their content hash; this is why you can step back through history
(among other features). Let's start with an empty directory, and start
constructing a valid .git directory from scratch.

,* .git directory
Before we start building our own directory, let's take a look at the contents of
the .git directory in repo containing this document. The files in the .git
directory contain all of the contents of the repo.

,#+BEGIN_SRC sh :results output :exports both
ls -lah .git
,#+END_SRC

,#+RESULTS:
,#+begin_example
total 11K
drwxr-xr-x 8 jackb jackb  13 Nov 29 08:01 .
drwxr-xr-x 3 jackb jackb  10 Nov 29 08:22 ..
drwxr-xr-x 2 jackb jackb   2 Nov 28 22:28 branches
-rw-r--r-- 1 jackb jackb 280 Nov 28 22:28 config
-rw-r--r-- 1 jackb jackb  73 Nov 28 22:28 description
-rw-r--r-- 1 jackb jackb  23 Nov 28 22:28 HEAD
drwxr-xr-x 2 jackb jackb  14 Nov 28 22:28 hooks
-rw-r--r-- 1 jackb jackb 385 Nov 28 22:28 index
drwxr-xr-x 2 jackb jackb   3 Nov 28 22:28 info
drwxr-xr-x 3 jackb jackb   4 Nov 28 22:28 logs
drwxr-xr-x 4 jackb jackb   4 Nov 28 22:28 objects
-rw-r--r-- 1 jackb jackb 114 Nov 28 22:28 packed-refs
drwxr-xr-x 5 jackb jackb   5 Nov 28 22:28 refs
,#+end_example

,** .git/objects
Every time you commit, files get stored in .git/objects based on their SHA256.
We can get the hash that git will use when storing a file

,#+begin_src sh :results output :exports both
git hash-object example.txt
,#+end_src

,#+RESULTS:
: 8b04d2f66940d680d9f281235d026dbcbd7edbf8

and then see it in the .git/objects directory

,#+begin_src shell :results output :exports both
ls -lah .git/objects
,#+end_src

,#+RESULTS:
: total 13K
: drwxr-xr-x 4 jackb jackb  4 Nov 28 22:28 .
: drwxr-xr-x 8 jackb jackb 13 Nov 29 08:01 ..
: drwxr-xr-x 2 jackb jackb  2 Nov 28 22:28 info
: drwxr-xr-x 2 jackb jackb  4 Nov 28 22:28 pack

,#+begin_src shell :results output :exports both
ls -lah .git/objects/8b
,#+end_src

,#+RESULTS:

,* Reading Objects
git uses a SHA-1 hashing algorithm, but only after prepending some header metadata.

run shasum -a 1 example.txt

Use plumbing commands to get the contents of the file back out.

run xxd .git/objects/8b/04d2f66940d680d9f281235d026dbcbd7edbf8
run git cat-file -p 8b04d2f66940d680d9f281235d026dbcbd7edbf8

,* Commits
Commits are also stored as objects in this blob storage.

run git --no-pager log -n 1 fc9cf9e409cb11685d0a90b7e78585ca76723b12
run tree .git/objects/fc
run git cat-file -p fc9cf9e409cb11685d0a90b7e78585ca76723b12
#+end_example

* Commits
Commits are also stored as objects in this blob storage. Let's grab the first
commit in the log

#+BEGIN_SRC sh :results output :exports both
git --no-pager log -n 1 --oneline --no-abbrev-commit
#+end_src

#+RESULTS:
: ceb61252adfa89b84497490e55e0502a88365bc6 Switch to org-mode

and then take a look at what we see in the objects directory based on the hash
of the commit.

#+BEGIN_SRC sh :results output :exports both
tree .git/objects/ce
#+end_src

#+RESULTS:
: .git/objects/ce
: └── b61252adfa89b84497490e55e0502a88365bc6
:
: 0 directories, 1 file

If we cat the file, we'll see the metadata about tho commit object, which links
to tree and parent which define the point-in-"time" of the commit action, and
information about the author and committer. Finally, it's got the actual commit message.

#+BEGIN_SRC sh :results output :exports both
git cat-file -p fc9cf9e409cb11685d0a90b7e78585ca76723b12
#+end_src

#+RESULTS:
: tree 6b8b8813053af0db99b4aab95fec7d7a38558de1
: parent 7cdc181f683b652ee8c0a6d4ae7adb66ac6f5ff9
: author Jack Brown <jack@brownjohnf.com> 1566864102 -0700
: committer Jack Brown <jack@brownjohnf.com> 1566864102 -0700
:
: add example.txt
